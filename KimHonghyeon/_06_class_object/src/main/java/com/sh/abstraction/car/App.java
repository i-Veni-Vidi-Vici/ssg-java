package com.sh.abstraction.car;

/**
 * 객체지향 프로그래밍 OOP
 * - Object Oriented Programming
 * - 현실세계의 모든 사건은 객체와 객체와의 상호작용임을 차용
 * - 객체와 상호작용을 코드로 구현하기 위해 각 객체들에 의인화가 적용
 * - 객체는 스스로 책임을 가지고 행동을 수행하게 된다.
 * - 객체는 적절한 책임을 가질 수 있게 클래스 단위로 잘게 분리해 작성해야한다.
 *
 * 자바 프로그래밍에서 객체란
 * - 클래스를 기반으로 메모리에 적재된 형태
 * - 클래스에 선언된 필드구조 그대로 메모리에 적재
 * - 클래스 1 : 객체 n 구조를 가진다.
 * - 추상화란 : 현실세계의 복잡함을 단순화해서 해당 프로그램에 최적화된 상태로 클래스를 설계
 * - 공통점을 뽑아내고 불필요한 것을 제거하는 것
 *
 * 객체와의 상효작용
 * - 프로그래밍에서 객체는 메세지를 통해서 상호작용
 * - 송신자 객체가 메세지를 보내고(메소드 호출), 수신자 객체는 메세지의 내용(매개인자)에 따라 특정 작업을 수행한다.
 * - 수행한 작업 결과를 반환
 *
 * 운전프로그램
 * 0. 요구사항 정리
 *  - 운전프로그램
 *  - 운전자는 시동걸기, 시동끄기, 감속, 가속 가능해야함
 *  - 자동차는 시동걸기, 시동끄기, 감속, 가속 가능해야함.
 *  - 자동차는 처음엔 대기상태
 *  - 운전자에 의해 시동이 걸리고, 이미 시동이 걸려 있다면 다시 시동을 걸 수 없어야 함.
 * 1. 객체 도출
 *  - 자동차
 *  - 운전자
 *  - 사용자
 * 2. 객체간의 상호작용
 * - 사용자선택 -> 운전자객체 -> 자동차객체
 * - 시동켜기메뉴선택 -> 운전자 시동켜기 -> 자동차 시동켜기
 * - 가속 선택 -> 운전자 가속 -> 자동차 가속(현재속도 변경)
 * - 감속 선택 -> 운전자 감속 -> 자동차 감속(현재속도 변경)
 * - 시동끄기 선택 -> 운전자 시동 끄기 -> 자동차 시동 끄기
 *
 * 3. 클래스 설계
 * - 사용자클래스(실행 클래스)
 * - 운전자클래스(시동켜기, 시동끄기, 가속, 감속)
 * - 자동차 클래스(시동켜기, 시동끄기, 가속, 감속/ 시동상태, 속도값)
 */
public class App {
    public static void main(String[] args) {
        CarMenu carMenu = new CarMenu();
        carMenu.menu();

    }
}
