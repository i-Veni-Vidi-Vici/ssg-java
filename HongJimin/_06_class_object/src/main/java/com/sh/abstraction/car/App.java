package com.sh.abstraction.car;

/**
 *### 자바 프로그래밍에서의 객체란?
 *
 * - 클래스를 기반으로 메모리에 적재된 형태를 가리킴
 * - 클래스의 선언된 필드 구조 그대로 메모리에 적재됨
 * - 클래스 1개 : 객체 n개인 구조를 가짐
 *
 * ### 추상화란?
 *
 * - 현실 세계의 복잡함을 단순화에서 해당 프로그램에 최적화된 상태로 클래스를 설계하는 것
 * - 공통점을 뽑아내고, 불필요한 것을 제거하는 것
 *
 * ### 객체와 상호작용
 *
 * - 프로그래밍에서 객체는 메세지를 통해서 상호작용.
 * - 송신자 객체가 메세지를 보내고(`메소드 호출`), 수신자 객체는 메세지의 내용(`매개인자`)에 따라 특정 작업을 수행함!
 * - 수행한 작업 결과를 답장(`리턴값`)으로 보낸다.
 *
 * ### 운전 프로그램
 *
 * - 1. 객체 도출
 *      - 자동차
 *      - 운전자
 *      - 사용자
 * - 2. 객체 간의 상호작용 - 커뮤니케이션 다이어그램
 *      - 사용자 선택 → 운전자 객체 → 자동차 객체
 *      - 시동 켜기 메뉴 선택 → 운전자 시동 켜기(메소드 호출) → 자동차 시동 켜기
 *      - 가속 메뉴 선택 → 운전자 가속 → 자동차 가속(현재 속도를 변경)
 *      - 감속 메뉴 선택 → 운전자 감속 → 자동차 감속(현재 속도를 변경)
 *      - 시동 끄기 메뉴 선택 → 운전자 시동 끄기 → 자동차 시동 끄기
*   - 3. 클래스 설계
*     - 사용자 클래스(실행 클래스)
*     - 운전자 클래스(시동켜기, 시동끄기, 가속, 감속메소드)
*     - 자동차 클래스(시동켜기, 시동끄기, 가속, 감속메소드 | 시동 상태, 속도 상태 값)
 *
 *  - 각 객체가 수신할 수 있는 메세지(역할/책임 정의)
 *     - carMenu
 *         - 사용자가 선택할 수 있는 메뉴 제공
 *     - Driver
 *         - 시동 켜기
 *         - 가속
 *         - 감속
 *         - 시동 끄기
 *     - Car
 *         - 시동 켜기
 *         - 가속
 *         - 감속
 *         - 시동 끄기
*/
public class App {
    public static void main(String[] args) {
        CarMenu carMenu = new CarMenu();
        carMenu.menu();
    }
}
